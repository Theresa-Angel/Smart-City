# -*- coding: utf-8 -*-
"""Smart-City-Assistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eu0zeYOGHj7PyQ8UBxELaMvyYe6Px4Jj
"""

# -*- coding: utf-8 -*-

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import io

# Load model and tokenizer
model_name = "ibm-granite/granite-3.3-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""

    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

def eco_tips_generator(problem_keywords):
    prompt = f"Generate practical and actionable eco-friendly tips for sustainable living related to: {problem_keywords}. Provide specific solutions and suggestions:"
    return generate_response(prompt, max_length=1000)

def policy_summarization(pdf_file, policy_text):
    # Get text from PDF or direct input
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n\n{content}"
    else:
        summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n\n{policy_text}"

    return generate_response(summary_prompt, max_length=1200)

# Custom CSS for styling with light background
custom_css = """
:root {
    --primary: #3498db;
    --secondary: #2ecc71;
    --accent: #e74c3c;
    --light: #f8f9fa;
    --dark: #2c3e50;
    --border: #e0e0e0;
}

.gradio-container {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #f5f7fa !important;
}

.gr-block {
    background-color: white !important;
    border-radius: 8px !important;
    padding: 20px !important;
    border: 1px solid var(--border) !important;
    box-shadow: 0 2px 6px rgba(0,0,0,0.05) !important;
}

h1 {
    text-align: center !important;
    color: var(--dark) !important;
    font-size: 2rem !important;
    margin-bottom: 10px !important;
}

h2 {
    color: var(--dark) !important;
    font-size: 1.5rem !important;
}

.tab-nav {
    background: white !important;
    border-radius: 8px !important;
    padding: 10px !important;
    margin-bottom: 20px !important;
    border: 1px solid var(--border) !important;
}

.tab-item {
    padding: 12px 20px !important;
    border-radius: 6px !important;
    font-weight: 600 !important;
}

.tab-item.selected {
    color: white !important;
}

button {
    background: var(--primary) !important;
    color: white !important;
    border-radius: 6px !important;
    padding: 10px 20px !important;
    border: none !important;
    font-weight: 600 !important;
}

button:hover {
    background: #2980b9 !important;
}

.label {
    font-weight: 600 !important;
    color: var(--dark) !important;
    margin-bottom: 8px !important;
}

.footer {
    text-align: center;
    color: #7f8c8d;
    padding: 15px;
    margin-top: 30px;
    font-size: 0.9rem;
}

.header {
    text-align: center;
    background: white !important;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    border: 1px solid var(--border);
}

.header h1 {
    color: var(--dark);
    margin-bottom: 5px;
}

.header p {
    color: #7f8c8d;
    margin: 0;
}
"""

# Create Gradio interface with enhanced UI
with gr.Blocks(css=custom_css, theme=gr.themes.Soft()) as app:
    # Header section
    gr.Markdown("""
    <div class="header">
        <h1> SUSTAINABLE SMART CITY ASSISTANT </h1>

    </div>
    """)

    # Main tabs
    with gr.Tabs():
        with gr.TabItem("ðŸ’¡ Eco Tips Generator"):
            gr.Markdown("### Generate Eco-Friendly Tips")
            gr.Markdown("Enter keywords related to environmental issues you care about, and our AI will generate practical tips for sustainable living.")

            with gr.Row():
                with gr.Column():
                    keywords_input = gr.Textbox(
                        label="Environmental Problem/Keywords",
                        placeholder="e.g., plastic waste, solar energy, water conservation, energy saving...",
                        lines=3
                    )
                    with gr.Row():
                        generate_tips_btn = gr.Button("Generate Eco Tips", variant="primary")
                        clear_btn = gr.Button("Clear")

                with gr.Column():
                    tips_output = gr.Textbox(
                        label="Sustainable Living Tips",
                        lines=10,
                        interactive=False
                    )

        with gr.TabItem("ðŸ“‹ Policy Summarization"):
            gr.Markdown("### Analyze Policy Documents")
            gr.Markdown("Upload a PDF policy document or paste text directly to get a concise summary and key insights.")

            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(
                        label="Upload Policy PDF",
                        file_types=[".pdf"],
                        file_count="single"
                    )
                    policy_text_input = gr.Textbox(
                        label="Or paste policy text here",
                        placeholder="Paste policy document text...",
                        lines=5
                    )
                    with gr.Row():
                        summarize_btn = gr.Button("Summarize Policy", variant="primary")
                        clear_btn_2 = gr.Button("Clear")

                with gr.Column():
                    summary_output = gr.Textbox(
                        label="Policy Summary & Key Points",
                        lines=10,
                        interactive=False
                    )

    # Footer
    gr.Markdown("""
    <div class="footer">
        <p>Sustainable Smart City Assistant Â© 2025 | Powered by IBM Granite LLM Technology</p>
    </div>
    """)

    # Define interactions
    generate_tips_btn.click(
        fn=eco_tips_generator,
        inputs=keywords_input,
        outputs=tips_output
    )

    summarize_btn.click(
        fn=policy_summarization,
        inputs=[pdf_upload, policy_text_input],
        outputs=summary_output
    )

    clear_btn.click(
        fn=lambda: ("", ""),
        inputs=None,
        outputs=[keywords_input, tips_output]
    )

    clear_btn_2.click(
        fn=lambda: (None, "", ""),
        inputs=None,
        outputs=[pdf_upload, policy_text_input, summary_output]
    )

app.launch(share=True, debug=True)